1. Criar uma conta na Photon Cloud.

a) Abra o navegador e acesse a url www.photonengine.com.

b) Crie uma conta na Photon Cloud acessando a opção Sign In. Uma mensagem será enviada para email para cadastar uma senha.

c) Faça o login na Photon Cloud com sua conta.

d) Crie um novo aplicativo acessando CREATE A NEW APP.

e) Selecione no campo tipo o valor Photon PUN. Defina um noma para sua aplicação. Por fim, acionar a opção CREATE.

f) Copie o AppID para ser utilizado na Unity.



2. Criar um projeto Unit.

a) Abra o aplicativo UnityHub.

b) Na aba Projects, crie um projeto Unity 2019 acionando a opção New.

c) Prossiga atribuindo o template 3D e nome Atividade05 ao projeto.

d) Verifique se a localização do projeto está indicando a pasta JOD061\Atividades. Senão estiver, atualize para o caminho correto (C:\Users\SEU-LOGIN\Documentos\JOD061\Atividades).

e) Acesse a Asset Store e procure por PUN2 - FREE. Importe o pacote na Unity. 

f) Cole o AppID criado na Photon Cloud.



3. Criar um script para conectar na Photon Cloud.

a) Crie um GameObject vazio com o nome Photon Network Manager.

b) Crie na pasta Scripts um script com o nome PhotonConnection. Ligue o script ao objeto Photon Network Manager.

c) Abra o script PhotonConnection.cs no VSCode. Faça a classe herdar de MonoBehaviourPunCallbacks e usar os pacotes Photon.Pun e Photon.Runtime.

d) Declare duas variáveis string na classe PhotonConnection. A primeira deve ser chamar gameVersion e ser inicializada com o valor "0.0.1". A segunda deve se chamar nickname e ser inicializada com "Player".

e) No método Start da classe PhotonConnection, faça imprimir a mensagem "Conectando ao servidor...".

Debug.Log("Conectando ao servidor...", this);

f) Ainda no método Start, atribua o valor da variável gameVersion à propridedade PhotonNetwork.GameVersion e o valor da variável nickname mais Random.Range(0, 9999) à propriedade PhotonNetwork.NickName.

PhotonNetwork.GameVersion = gameVersion;
PhotonNetwork.NickName = nickName + Random.Range(0, 9999);

g) Ainda no método Start, faça uma chamada o método PhotonNetwork.ConnectUsingSettings.

h) No método OnConnectedToMaster faça imprimir a mensagem "Conectado!".

public override void OnConnectedToMaster() {
   Debug.Log("Conectado!", this);
}

i) No método OnDisconnected faça imprimir a mensagem "Disconectado!".

public override void OnDisconnected(Photon.Realtime.DisconnectCause cause) {
   Debug.Log("Desconectado!");
}

j) Execute a cena na Unity. Qual foi o resultado na aba Console?

Conectando ao servidor...
UnityEngine.Debug:Log(Object, Object)
PhotonConnection:Start() (at Assets/Scripts/PhotonConnection.cs:14)


Conectado!
UnityEngine.Debug:Log(Object, Object)
PhotonConnection:OnConnectedToMaster() (at Assets/Scripts/PhotonConnection.cs:27)
Photon.Realtime.ConnectionCallbacksContainer:OnConnectedToMaster() (at Assets/Photon/PhotonRealtime/Code/LoadBalancingClient.cs:3728)
Photon.Realtime.LoadBalancingClient:OnOperationResponse(OperationResponse) (at Assets/Photon/PhotonRealtime/Code/LoadBalancingClient.cs:2460)
ExitGames.Client.Photon.PeerBase:DeserializeMessageAndCallback(StreamBuffer)
ExitGames.Client.Photon.EnetPeer:DispatchIncomingCommands()
ExitGames.Client.Photon.PhotonPeer:DispatchIncomingCommands()
Photon.Pun.PhotonHandler:Dispatch() (at Assets/Photon/PhotonUnityNetworking/Code/PhotonHandler.cs:205)
Photon.Pun.PhotonHandler:FixedUpdate() (at Assets/Photon/PhotonUnityNetworking/Code/PhotonHandler.cs:139)


k) Interrompa a cena na Unity. Qual foi o resultado na aba Console?

Desconectado! DisconnectByClientLogic
UnityEngine.Debug:Log(Object)
PhotonConnection:OnDisconnected(DisconnectCause) (at Assets/Scripts/PhotonConnection.cs:31)
Photon.Realtime.ConnectionCallbacksContainer:OnDisconnected(DisconnectCause) (at Assets/Photon/PhotonRealtime/Code/LoadBalancingClient.cs:3748)
Photon.Realtime.LoadBalancingClient:OnStatusChanged(StatusCode) (at Assets/Photon/PhotonRealtime/Code/LoadBalancingClient.cs:2787)
ExitGames.Client.Photon.EnetPeer:StopConnection()
ExitGames.Client.Photon.PhotonPeer:StopThread()
Photon.Realtime.ConnectionHandler:OnDisable() (at Assets/Photon/PhotonRealtime/Code/ConnectionHandler.cs:92)
Photon.Pun.PhotonHandler:OnDisable() (at Assets/Photon/PhotonUnityNetworking/Code/PhotonHandler.cs:132)




4. Criar uma room na Photon Cloud.

a) Dentro da classe PhotonConnection declare uma variável roomName inicializando com o valor "JOD061".

b) No método OnConnectedToMaster verifique se não foi criada alguma room.

if (PhotonNetwork.CountOfRooms == 0) {
} else {
}

c) Se não existir a room, crie uma variável options incializando com uma instância de RoomOptions. Atribua a propriedade MaxPlayers o valor 4.

RoomOptions options = new RoomOptions();
options.MaxPlayers = 4;

d) Ainda se não exister a room, faça uma chamada ao método PhotonNetwork.JoinOrCreateRoom passando como parâmetros a variável roomName, a variável options e o tipo de lobby padrão.

PhotonNetwork.JoinOrCreateRoom(roomName, options, TypedLobby.Default);

e) Se existir uma room, faça a chamada ao método PhotonNetwork.JoinRoom passando a variável roomName.

PhotonNetwork.JoinRoom(roomName);

f) No método OnCreatedRoom da classe PhotonConnection faça imprimir a mensagem "Criada a sala X". 

public override void OnCreatedRoom() {
  Debug.Log("Criada a sala " + roomName);
}

g) Ainda no método OnCreatedRoom faça imprimir a mensagem "Jogador N entrou na sala X (numero de jogadores na sala)".

Debug.Log("Jogador " + PhotonNetwork.LocalPlayer.NickName + " entrou na sala " + roomName + " (" + PhotonNetwork.CurrentRoom.PlayerCount + ")");

h) No método OnPlayerEnteredRoom() da classe PhotonConnection faça imprimir a mensagem a mensagem "Jogador N entrou na sala X (numero de jogadores na sala)"..

i) No método OnPlayerLeftRoom da classe PhotonConnection faça imprimir a mensagem a mensagem "Jogador N saiu da sala X (numero de jogadores na sala)"..

j) Gere uma build do jogo com a resolução 640x480 em modo janela (Windowed), sem executar.

k) Execute a cena pelo Unity. Execuute a build pelos menos 5 vezes. Qual foi o resultado?

Travou meu computador na terceira.

l) Pare a execução do jogo.



5. Versionar o projeto Unity no GitHub.

a) No VSCode, pressione as teclas Ctrl+Shift+G para acessar o painel do Git. Em seguida, clique em Stage All.

b) Efetive o commit acionando a opção Commit All. Não esqueça de por um comentário ao commit (Ex.: Criando o projeto Atividade05). 

c) Envie os arquivos versionados para o git remoto acionando a opção Push. Informe usuário/senha e acione a opção Sign in.
